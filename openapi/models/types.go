//go:build go1.22

// Package models provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package models

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for TorrentStatus.
const (
	Downloaded  TorrentStatus = "downloaded"
	Downloading TorrentStatus = "downloading"
	Parsed      TorrentStatus = "parsed"
	Pending     TorrentStatus = "pending"
	Queued      TorrentStatus = "queued"
)

// Health defines model for health.
type Health struct {
	Ok      bool   `json:"ok"`
	Version string `json:"version"`
}

// Role defines model for role.
type Role struct {
	Description string `json:"description"`
	Id          string `json:"id"`
	Name        string `json:"name"`
}

// RolePost defines model for role_post.
type RolePost struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// RolePut defines model for role_put.
type RolePut struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// Torrent a torrent magnet link with a description
type Torrent struct {
	Created    time.Time     `json:"created"`
	Filename   string        `json:"filename"`
	Files      []TorrentFile `json:"files"`
	Hash       string        `json:"hash"`
	Id         string        `json:"id"`
	LastError  string        `json:"last_error"`
	MagnetLink string        `json:"magnet_link"`
	Name       string        `json:"name"`
	Percent    *float64      `json:"percent,omitempty"`
	PieceCount int           `json:"piece_count"`
	PieceSize  string        `json:"piece_size"`
	Privacy    string        `json:"privacy"`
	Status     TorrentStatus `json:"status"`
	TotalSize  string        `json:"total_size"`
	Updated    *time.Time    `json:"updated,omitempty"`
	User       *User         `json:"user,omitempty"`
}

// TorrentStatus defines model for Torrent.Status.
type TorrentStatus string

// TorrentFile defines model for torrent_file.
type TorrentFile struct {
	FileName  string `json:"file_name"`
	FileSize  string `json:"file_size"`
	Id        string `json:"id"`
	TorrentId string `json:"torrent_id"`
}

// User defines model for user.
type User struct {
	Created   time.Time `json:"created"`
	Email     string    `json:"email"`
	Id        string    `json:"id"`
	Image     *string   `json:"image,omitempty"`
	IsDeleted bool      `json:"is_deleted"`
	LastLogin time.Time `json:"last_login"`
	Name      string    `json:"name"`
}

// UserListParams defines model for user_list_params.
type UserListParams struct {
	EmailMatch  string   `json:"email_match"`
	Emails      []string `json:"emails"`
	Ids         []string `json:"ids"`
	Limit       *int     `json:"limit,omitempty"`
	Offset      int      `json:"offset"`
	OnlyDeleted bool     `json:"only_deleted"`
}

// UserLoginResponse defines model for user_login_response.
type UserLoginResponse struct {
	Created   time.Time `json:"created"`
	Email     string    `json:"email"`
	Id        string    `json:"id"`
	Image     *string   `json:"image,omitempty"`
	IsDeleted bool      `json:"is_deleted"`
	LastLogin time.Time `json:"last_login"`
	Name      string    `json:"name"`
	Roles     []string  `json:"roles"`
}

// UserPost defines model for user_post.
type UserPost struct {
	Email string  `json:"email"`
	Id    string  `json:"id"`
	Image *string `json:"image,omitempty"`
	Name  string  `json:"name"`
}

// UserPut defines model for user_put.
type UserPut struct {
	Email string  `json:"email"`
	Image *string `json:"image,omitempty"`
	Name  string  `json:"name"`
}

// GetV1TorrentsParams defines parameters for GetV1Torrents.
type GetV1TorrentsParams struct {
	Limit  int     `form:"limit" json:"limit"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Status *string `form:"status,omitempty" json:"status,omitempty"`
}

// PostV1TorrentsMagnetsJSONBody defines parameters for PostV1TorrentsMagnets.
type PostV1TorrentsMagnetsJSONBody struct {
	Urls *[]string `json:"urls,omitempty"`
}

// PostV1RolesJSONRequestBody defines body for PostV1Roles for application/json ContentType.
type PostV1RolesJSONRequestBody = RolePost

// PutV1RolesIdJSONRequestBody defines body for PutV1RolesId for application/json ContentType.
type PutV1RolesIdJSONRequestBody = RolePut

// PostV1TorrentsMagnetsJSONRequestBody defines body for PostV1TorrentsMagnets for application/json ContentType.
type PostV1TorrentsMagnetsJSONRequestBody PostV1TorrentsMagnetsJSONBody

// PostV1UserListJSONRequestBody defines body for PostV1UserList for application/json ContentType.
type PostV1UserListJSONRequestBody = UserListParams

// PostV1UsersJSONRequestBody defines body for PostV1Users for application/json ContentType.
type PostV1UsersJSONRequestBody = UserPost

// PostV1UsersLoginJSONRequestBody defines body for PostV1UsersLogin for application/json ContentType.
type PostV1UsersLoginJSONRequestBody = User

// PutV1UsersIdJSONRequestBody defines body for PutV1UsersId for application/json ContentType.
type PutV1UsersIdJSONRequestBody = UserPut

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetV1Healthz request
	GetV1Healthz(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1Roles request
	GetV1Roles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1RolesWithBody request with any body
	PostV1RolesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1Roles(ctx context.Context, body PostV1RolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1RolesId request
	DeleteV1RolesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1RolesId request
	GetV1RolesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1RolesIdWithBody request with any body
	PutV1RolesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1RolesId(ctx context.Context, id string, body PutV1RolesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1RolesRoleIdUsers request
	GetV1RolesRoleIdUsers(ctx context.Context, roleId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1RolesRoleIdUsersUserId request
	DeleteV1RolesRoleIdUsersUserId(ctx context.Context, roleId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1RolesRoleIdUsersUserId request
	PutV1RolesRoleIdUsersUserId(ctx context.Context, roleId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1Torrents request
	GetV1Torrents(ctx context.Context, params *GetV1TorrentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1TorrentsMagnetsWithBody request with any body
	PostV1TorrentsMagnetsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1TorrentsMagnets(ctx context.Context, body PostV1TorrentsMagnetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1TorrentsStatuses request
	GetV1TorrentsStatuses(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1TorrentsId request
	GetV1TorrentsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1TorrentsIdDownload request
	PostV1TorrentsIdDownload(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1UserListWithBody request with any body
	PostV1UserListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1UserList(ctx context.Context, body PostV1UserListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1UsersWithBody request with any body
	PostV1UsersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1Users(ctx context.Context, body PostV1UsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1UsersLoginWithBody request with any body
	PostV1UsersLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1UsersLogin(ctx context.Context, body PostV1UsersLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1UsersWhoami request
	GetV1UsersWhoami(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1UsersId request
	DeleteV1UsersId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1UsersId request
	GetV1UsersId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1UsersIdWithBody request with any body
	PutV1UsersIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1UsersId(ctx context.Context, id string, body PutV1UsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1UsersUserIdRoles request
	GetV1UsersUserIdRoles(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetV1Healthz(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1HealthzRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1Roles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1RolesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1RolesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1RolesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1Roles(ctx context.Context, body PostV1RolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1RolesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1RolesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1RolesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1RolesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1RolesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1RolesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1RolesIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1RolesId(ctx context.Context, id string, body PutV1RolesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1RolesIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1RolesRoleIdUsers(ctx context.Context, roleId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1RolesRoleIdUsersRequest(c.Server, roleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1RolesRoleIdUsersUserId(ctx context.Context, roleId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1RolesRoleIdUsersUserIdRequest(c.Server, roleId, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1RolesRoleIdUsersUserId(ctx context.Context, roleId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1RolesRoleIdUsersUserIdRequest(c.Server, roleId, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1Torrents(ctx context.Context, params *GetV1TorrentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1TorrentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1TorrentsMagnetsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1TorrentsMagnetsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1TorrentsMagnets(ctx context.Context, body PostV1TorrentsMagnetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1TorrentsMagnetsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1TorrentsStatuses(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1TorrentsStatusesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1TorrentsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1TorrentsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1TorrentsIdDownload(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1TorrentsIdDownloadRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1UserListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1UserListRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1UserList(ctx context.Context, body PostV1UserListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1UserListRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1UsersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1UsersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1Users(ctx context.Context, body PostV1UsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1UsersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1UsersLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1UsersLoginRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1UsersLogin(ctx context.Context, body PostV1UsersLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1UsersLoginRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1UsersWhoami(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1UsersWhoamiRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1UsersId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1UsersIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1UsersId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1UsersIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1UsersIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1UsersIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1UsersId(ctx context.Context, id string, body PutV1UsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1UsersIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1UsersUserIdRoles(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1UsersUserIdRolesRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetV1HealthzRequest generates requests for GetV1Healthz
func NewGetV1HealthzRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/healthz")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1RolesRequest generates requests for GetV1Roles
func NewGetV1RolesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1RolesRequest calls the generic PostV1Roles builder with application/json body
func NewPostV1RolesRequest(server string, body PostV1RolesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1RolesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1RolesRequestWithBody generates requests for PostV1Roles with any type of body
func NewPostV1RolesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1RolesIdRequest generates requests for DeleteV1RolesId
func NewDeleteV1RolesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1RolesIdRequest generates requests for GetV1RolesId
func NewGetV1RolesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV1RolesIdRequest calls the generic PutV1RolesId builder with application/json body
func NewPutV1RolesIdRequest(server string, id string, body PutV1RolesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1RolesIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutV1RolesIdRequestWithBody generates requests for PutV1RolesId with any type of body
func NewPutV1RolesIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1RolesRoleIdUsersRequest generates requests for GetV1RolesRoleIdUsers
func NewGetV1RolesRoleIdUsersRequest(server string, roleId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "role_id", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/roles/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteV1RolesRoleIdUsersUserIdRequest generates requests for DeleteV1RolesRoleIdUsersUserId
func NewDeleteV1RolesRoleIdUsersUserIdRequest(server string, roleId string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "role_id", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/roles/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV1RolesRoleIdUsersUserIdRequest generates requests for PutV1RolesRoleIdUsersUserId
func NewPutV1RolesRoleIdUsersUserIdRequest(server string, roleId string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "role_id", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/roles/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1TorrentsRequest generates requests for GetV1Torrents
func NewGetV1TorrentsRequest(server string, params *GetV1TorrentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/torrents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1TorrentsMagnetsRequest calls the generic PostV1TorrentsMagnets builder with application/json body
func NewPostV1TorrentsMagnetsRequest(server string, body PostV1TorrentsMagnetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1TorrentsMagnetsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1TorrentsMagnetsRequestWithBody generates requests for PostV1TorrentsMagnets with any type of body
func NewPostV1TorrentsMagnetsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/torrents/magnets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1TorrentsStatusesRequest generates requests for GetV1TorrentsStatuses
func NewGetV1TorrentsStatusesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/torrents/statuses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1TorrentsIdRequest generates requests for GetV1TorrentsId
func NewGetV1TorrentsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/torrents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1TorrentsIdDownloadRequest generates requests for PostV1TorrentsIdDownload
func NewPostV1TorrentsIdDownloadRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/torrents/%s/download", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1UserListRequest calls the generic PostV1UserList builder with application/json body
func NewPostV1UserListRequest(server string, body PostV1UserListJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1UserListRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1UserListRequestWithBody generates requests for PostV1UserList with any type of body
func NewPostV1UserListRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/user-list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1UsersRequest calls the generic PostV1Users builder with application/json body
func NewPostV1UsersRequest(server string, body PostV1UsersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1UsersRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1UsersRequestWithBody generates requests for PostV1Users with any type of body
func NewPostV1UsersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1UsersLoginRequest calls the generic PostV1UsersLogin builder with application/json body
func NewPostV1UsersLoginRequest(server string, body PostV1UsersLoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1UsersLoginRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1UsersLoginRequestWithBody generates requests for PostV1UsersLogin with any type of body
func NewPostV1UsersLoginRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1UsersWhoamiRequest generates requests for GetV1UsersWhoami
func NewGetV1UsersWhoamiRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users/whoami")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteV1UsersIdRequest generates requests for DeleteV1UsersId
func NewDeleteV1UsersIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1UsersIdRequest generates requests for GetV1UsersId
func NewGetV1UsersIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV1UsersIdRequest calls the generic PutV1UsersId builder with application/json body
func NewPutV1UsersIdRequest(server string, id string, body PutV1UsersIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1UsersIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutV1UsersIdRequestWithBody generates requests for PutV1UsersId with any type of body
func NewPutV1UsersIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1UsersUserIdRolesRequest generates requests for GetV1UsersUserIdRoles
func NewGetV1UsersUserIdRolesRequest(server string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users/%s/roles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetV1HealthzWithResponse request
	GetV1HealthzWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1HealthzResponse, error)

	// GetV1RolesWithResponse request
	GetV1RolesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1RolesResponse, error)

	// PostV1RolesWithBodyWithResponse request with any body
	PostV1RolesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1RolesResponse, error)

	PostV1RolesWithResponse(ctx context.Context, body PostV1RolesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1RolesResponse, error)

	// DeleteV1RolesIdWithResponse request
	DeleteV1RolesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteV1RolesIdResponse, error)

	// GetV1RolesIdWithResponse request
	GetV1RolesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1RolesIdResponse, error)

	// PutV1RolesIdWithBodyWithResponse request with any body
	PutV1RolesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1RolesIdResponse, error)

	PutV1RolesIdWithResponse(ctx context.Context, id string, body PutV1RolesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1RolesIdResponse, error)

	// GetV1RolesRoleIdUsersWithResponse request
	GetV1RolesRoleIdUsersWithResponse(ctx context.Context, roleId string, reqEditors ...RequestEditorFn) (*GetV1RolesRoleIdUsersResponse, error)

	// DeleteV1RolesRoleIdUsersUserIdWithResponse request
	DeleteV1RolesRoleIdUsersUserIdWithResponse(ctx context.Context, roleId string, userId string, reqEditors ...RequestEditorFn) (*DeleteV1RolesRoleIdUsersUserIdResponse, error)

	// PutV1RolesRoleIdUsersUserIdWithResponse request
	PutV1RolesRoleIdUsersUserIdWithResponse(ctx context.Context, roleId string, userId string, reqEditors ...RequestEditorFn) (*PutV1RolesRoleIdUsersUserIdResponse, error)

	// GetV1TorrentsWithResponse request
	GetV1TorrentsWithResponse(ctx context.Context, params *GetV1TorrentsParams, reqEditors ...RequestEditorFn) (*GetV1TorrentsResponse, error)

	// PostV1TorrentsMagnetsWithBodyWithResponse request with any body
	PostV1TorrentsMagnetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1TorrentsMagnetsResponse, error)

	PostV1TorrentsMagnetsWithResponse(ctx context.Context, body PostV1TorrentsMagnetsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1TorrentsMagnetsResponse, error)

	// GetV1TorrentsStatusesWithResponse request
	GetV1TorrentsStatusesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1TorrentsStatusesResponse, error)

	// GetV1TorrentsIdWithResponse request
	GetV1TorrentsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1TorrentsIdResponse, error)

	// PostV1TorrentsIdDownloadWithResponse request
	PostV1TorrentsIdDownloadWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostV1TorrentsIdDownloadResponse, error)

	// PostV1UserListWithBodyWithResponse request with any body
	PostV1UserListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1UserListResponse, error)

	PostV1UserListWithResponse(ctx context.Context, body PostV1UserListJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1UserListResponse, error)

	// PostV1UsersWithBodyWithResponse request with any body
	PostV1UsersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1UsersResponse, error)

	PostV1UsersWithResponse(ctx context.Context, body PostV1UsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1UsersResponse, error)

	// PostV1UsersLoginWithBodyWithResponse request with any body
	PostV1UsersLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1UsersLoginResponse, error)

	PostV1UsersLoginWithResponse(ctx context.Context, body PostV1UsersLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1UsersLoginResponse, error)

	// GetV1UsersWhoamiWithResponse request
	GetV1UsersWhoamiWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1UsersWhoamiResponse, error)

	// DeleteV1UsersIdWithResponse request
	DeleteV1UsersIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteV1UsersIdResponse, error)

	// GetV1UsersIdWithResponse request
	GetV1UsersIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1UsersIdResponse, error)

	// PutV1UsersIdWithBodyWithResponse request with any body
	PutV1UsersIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1UsersIdResponse, error)

	PutV1UsersIdWithResponse(ctx context.Context, id string, body PutV1UsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1UsersIdResponse, error)

	// GetV1UsersUserIdRolesWithResponse request
	GetV1UsersUserIdRolesWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*GetV1UsersUserIdRolesResponse, error)
}

type GetV1HealthzResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Health
}

// Status returns HTTPResponse.Status
func (r GetV1HealthzResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1HealthzResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1RolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Role
}

// Status returns HTTPResponse.Status
func (r GetV1RolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1RolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1RolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Role
}

// Status returns HTTPResponse.Status
func (r PostV1RolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1RolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1RolesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Role
}

// Status returns HTTPResponse.Status
func (r DeleteV1RolesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1RolesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1RolesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Role
}

// Status returns HTTPResponse.Status
func (r GetV1RolesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1RolesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1RolesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Role
}

// Status returns HTTPResponse.Status
func (r PutV1RolesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1RolesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1RolesRoleIdUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]User
}

// Status returns HTTPResponse.Status
func (r GetV1RolesRoleIdUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1RolesRoleIdUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1RolesRoleIdUsersUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r DeleteV1RolesRoleIdUsersUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1RolesRoleIdUsersUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1RolesRoleIdUsersUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PutV1RolesRoleIdUsersUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1RolesRoleIdUsersUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1TorrentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Torrent
}

// Status returns HTTPResponse.Status
func (r GetV1TorrentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1TorrentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1TorrentsMagnetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *Torrent
}

// Status returns HTTPResponse.Status
func (r PostV1TorrentsMagnetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1TorrentsMagnetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1TorrentsStatusesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetV1TorrentsStatusesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1TorrentsStatusesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1TorrentsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Torrent
}

// Status returns HTTPResponse.Status
func (r GetV1TorrentsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1TorrentsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1TorrentsIdDownloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Torrent
}

// Status returns HTTPResponse.Status
func (r PostV1TorrentsIdDownloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1TorrentsIdDownloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1UserListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]User
}

// Status returns HTTPResponse.Status
func (r PostV1UserListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1UserListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1UsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]User
}

// Status returns HTTPResponse.Status
func (r PostV1UsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1UsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1UsersLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserLoginResponse
}

// Status returns HTTPResponse.Status
func (r PostV1UsersLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1UsersLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1UsersWhoamiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UserLoginResponse
}

// Status returns HTTPResponse.Status
func (r GetV1UsersWhoamiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1UsersWhoamiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1UsersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *User
}

// Status returns HTTPResponse.Status
func (r DeleteV1UsersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1UsersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1UsersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]User
}

// Status returns HTTPResponse.Status
func (r GetV1UsersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1UsersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1UsersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r PutV1UsersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1UsersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1UsersUserIdRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Role
}

// Status returns HTTPResponse.Status
func (r GetV1UsersUserIdRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1UsersUserIdRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetV1HealthzWithResponse request returning *GetV1HealthzResponse
func (c *ClientWithResponses) GetV1HealthzWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1HealthzResponse, error) {
	rsp, err := c.GetV1Healthz(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1HealthzResponse(rsp)
}

// GetV1RolesWithResponse request returning *GetV1RolesResponse
func (c *ClientWithResponses) GetV1RolesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1RolesResponse, error) {
	rsp, err := c.GetV1Roles(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1RolesResponse(rsp)
}

// PostV1RolesWithBodyWithResponse request with arbitrary body returning *PostV1RolesResponse
func (c *ClientWithResponses) PostV1RolesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1RolesResponse, error) {
	rsp, err := c.PostV1RolesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1RolesResponse(rsp)
}

func (c *ClientWithResponses) PostV1RolesWithResponse(ctx context.Context, body PostV1RolesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1RolesResponse, error) {
	rsp, err := c.PostV1Roles(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1RolesResponse(rsp)
}

// DeleteV1RolesIdWithResponse request returning *DeleteV1RolesIdResponse
func (c *ClientWithResponses) DeleteV1RolesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteV1RolesIdResponse, error) {
	rsp, err := c.DeleteV1RolesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1RolesIdResponse(rsp)
}

// GetV1RolesIdWithResponse request returning *GetV1RolesIdResponse
func (c *ClientWithResponses) GetV1RolesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1RolesIdResponse, error) {
	rsp, err := c.GetV1RolesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1RolesIdResponse(rsp)
}

// PutV1RolesIdWithBodyWithResponse request with arbitrary body returning *PutV1RolesIdResponse
func (c *ClientWithResponses) PutV1RolesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1RolesIdResponse, error) {
	rsp, err := c.PutV1RolesIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1RolesIdResponse(rsp)
}

func (c *ClientWithResponses) PutV1RolesIdWithResponse(ctx context.Context, id string, body PutV1RolesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1RolesIdResponse, error) {
	rsp, err := c.PutV1RolesId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1RolesIdResponse(rsp)
}

// GetV1RolesRoleIdUsersWithResponse request returning *GetV1RolesRoleIdUsersResponse
func (c *ClientWithResponses) GetV1RolesRoleIdUsersWithResponse(ctx context.Context, roleId string, reqEditors ...RequestEditorFn) (*GetV1RolesRoleIdUsersResponse, error) {
	rsp, err := c.GetV1RolesRoleIdUsers(ctx, roleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1RolesRoleIdUsersResponse(rsp)
}

// DeleteV1RolesRoleIdUsersUserIdWithResponse request returning *DeleteV1RolesRoleIdUsersUserIdResponse
func (c *ClientWithResponses) DeleteV1RolesRoleIdUsersUserIdWithResponse(ctx context.Context, roleId string, userId string, reqEditors ...RequestEditorFn) (*DeleteV1RolesRoleIdUsersUserIdResponse, error) {
	rsp, err := c.DeleteV1RolesRoleIdUsersUserId(ctx, roleId, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1RolesRoleIdUsersUserIdResponse(rsp)
}

// PutV1RolesRoleIdUsersUserIdWithResponse request returning *PutV1RolesRoleIdUsersUserIdResponse
func (c *ClientWithResponses) PutV1RolesRoleIdUsersUserIdWithResponse(ctx context.Context, roleId string, userId string, reqEditors ...RequestEditorFn) (*PutV1RolesRoleIdUsersUserIdResponse, error) {
	rsp, err := c.PutV1RolesRoleIdUsersUserId(ctx, roleId, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1RolesRoleIdUsersUserIdResponse(rsp)
}

// GetV1TorrentsWithResponse request returning *GetV1TorrentsResponse
func (c *ClientWithResponses) GetV1TorrentsWithResponse(ctx context.Context, params *GetV1TorrentsParams, reqEditors ...RequestEditorFn) (*GetV1TorrentsResponse, error) {
	rsp, err := c.GetV1Torrents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1TorrentsResponse(rsp)
}

// PostV1TorrentsMagnetsWithBodyWithResponse request with arbitrary body returning *PostV1TorrentsMagnetsResponse
func (c *ClientWithResponses) PostV1TorrentsMagnetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1TorrentsMagnetsResponse, error) {
	rsp, err := c.PostV1TorrentsMagnetsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1TorrentsMagnetsResponse(rsp)
}

func (c *ClientWithResponses) PostV1TorrentsMagnetsWithResponse(ctx context.Context, body PostV1TorrentsMagnetsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1TorrentsMagnetsResponse, error) {
	rsp, err := c.PostV1TorrentsMagnets(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1TorrentsMagnetsResponse(rsp)
}

// GetV1TorrentsStatusesWithResponse request returning *GetV1TorrentsStatusesResponse
func (c *ClientWithResponses) GetV1TorrentsStatusesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1TorrentsStatusesResponse, error) {
	rsp, err := c.GetV1TorrentsStatuses(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1TorrentsStatusesResponse(rsp)
}

// GetV1TorrentsIdWithResponse request returning *GetV1TorrentsIdResponse
func (c *ClientWithResponses) GetV1TorrentsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1TorrentsIdResponse, error) {
	rsp, err := c.GetV1TorrentsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1TorrentsIdResponse(rsp)
}

// PostV1TorrentsIdDownloadWithResponse request returning *PostV1TorrentsIdDownloadResponse
func (c *ClientWithResponses) PostV1TorrentsIdDownloadWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostV1TorrentsIdDownloadResponse, error) {
	rsp, err := c.PostV1TorrentsIdDownload(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1TorrentsIdDownloadResponse(rsp)
}

// PostV1UserListWithBodyWithResponse request with arbitrary body returning *PostV1UserListResponse
func (c *ClientWithResponses) PostV1UserListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1UserListResponse, error) {
	rsp, err := c.PostV1UserListWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1UserListResponse(rsp)
}

func (c *ClientWithResponses) PostV1UserListWithResponse(ctx context.Context, body PostV1UserListJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1UserListResponse, error) {
	rsp, err := c.PostV1UserList(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1UserListResponse(rsp)
}

// PostV1UsersWithBodyWithResponse request with arbitrary body returning *PostV1UsersResponse
func (c *ClientWithResponses) PostV1UsersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1UsersResponse, error) {
	rsp, err := c.PostV1UsersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1UsersResponse(rsp)
}

func (c *ClientWithResponses) PostV1UsersWithResponse(ctx context.Context, body PostV1UsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1UsersResponse, error) {
	rsp, err := c.PostV1Users(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1UsersResponse(rsp)
}

// PostV1UsersLoginWithBodyWithResponse request with arbitrary body returning *PostV1UsersLoginResponse
func (c *ClientWithResponses) PostV1UsersLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1UsersLoginResponse, error) {
	rsp, err := c.PostV1UsersLoginWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1UsersLoginResponse(rsp)
}

func (c *ClientWithResponses) PostV1UsersLoginWithResponse(ctx context.Context, body PostV1UsersLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1UsersLoginResponse, error) {
	rsp, err := c.PostV1UsersLogin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1UsersLoginResponse(rsp)
}

// GetV1UsersWhoamiWithResponse request returning *GetV1UsersWhoamiResponse
func (c *ClientWithResponses) GetV1UsersWhoamiWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1UsersWhoamiResponse, error) {
	rsp, err := c.GetV1UsersWhoami(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1UsersWhoamiResponse(rsp)
}

// DeleteV1UsersIdWithResponse request returning *DeleteV1UsersIdResponse
func (c *ClientWithResponses) DeleteV1UsersIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteV1UsersIdResponse, error) {
	rsp, err := c.DeleteV1UsersId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1UsersIdResponse(rsp)
}

// GetV1UsersIdWithResponse request returning *GetV1UsersIdResponse
func (c *ClientWithResponses) GetV1UsersIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1UsersIdResponse, error) {
	rsp, err := c.GetV1UsersId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1UsersIdResponse(rsp)
}

// PutV1UsersIdWithBodyWithResponse request with arbitrary body returning *PutV1UsersIdResponse
func (c *ClientWithResponses) PutV1UsersIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1UsersIdResponse, error) {
	rsp, err := c.PutV1UsersIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1UsersIdResponse(rsp)
}

func (c *ClientWithResponses) PutV1UsersIdWithResponse(ctx context.Context, id string, body PutV1UsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1UsersIdResponse, error) {
	rsp, err := c.PutV1UsersId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1UsersIdResponse(rsp)
}

// GetV1UsersUserIdRolesWithResponse request returning *GetV1UsersUserIdRolesResponse
func (c *ClientWithResponses) GetV1UsersUserIdRolesWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*GetV1UsersUserIdRolesResponse, error) {
	rsp, err := c.GetV1UsersUserIdRoles(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1UsersUserIdRolesResponse(rsp)
}

// ParseGetV1HealthzResponse parses an HTTP response from a GetV1HealthzWithResponse call
func ParseGetV1HealthzResponse(rsp *http.Response) (*GetV1HealthzResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1HealthzResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Health
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1RolesResponse parses an HTTP response from a GetV1RolesWithResponse call
func ParseGetV1RolesResponse(rsp *http.Response) (*GetV1RolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1RolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Role
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1RolesResponse parses an HTTP response from a PostV1RolesWithResponse call
func ParsePostV1RolesResponse(rsp *http.Response) (*PostV1RolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1RolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Role
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteV1RolesIdResponse parses an HTTP response from a DeleteV1RolesIdWithResponse call
func ParseDeleteV1RolesIdResponse(rsp *http.Response) (*DeleteV1RolesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1RolesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Role
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1RolesIdResponse parses an HTTP response from a GetV1RolesIdWithResponse call
func ParseGetV1RolesIdResponse(rsp *http.Response) (*GetV1RolesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1RolesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Role
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutV1RolesIdResponse parses an HTTP response from a PutV1RolesIdWithResponse call
func ParsePutV1RolesIdResponse(rsp *http.Response) (*PutV1RolesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1RolesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Role
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1RolesRoleIdUsersResponse parses an HTTP response from a GetV1RolesRoleIdUsersWithResponse call
func ParseGetV1RolesRoleIdUsersResponse(rsp *http.Response) (*GetV1RolesRoleIdUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1RolesRoleIdUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteV1RolesRoleIdUsersUserIdResponse parses an HTTP response from a DeleteV1RolesRoleIdUsersUserIdWithResponse call
func ParseDeleteV1RolesRoleIdUsersUserIdResponse(rsp *http.Response) (*DeleteV1RolesRoleIdUsersUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1RolesRoleIdUsersUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutV1RolesRoleIdUsersUserIdResponse parses an HTTP response from a PutV1RolesRoleIdUsersUserIdWithResponse call
func ParsePutV1RolesRoleIdUsersUserIdResponse(rsp *http.Response) (*PutV1RolesRoleIdUsersUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1RolesRoleIdUsersUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1TorrentsResponse parses an HTTP response from a GetV1TorrentsWithResponse call
func ParseGetV1TorrentsResponse(rsp *http.Response) (*GetV1TorrentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1TorrentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Torrent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1TorrentsMagnetsResponse parses an HTTP response from a PostV1TorrentsMagnetsWithResponse call
func ParsePostV1TorrentsMagnetsResponse(rsp *http.Response) (*PostV1TorrentsMagnetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1TorrentsMagnetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Torrent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseGetV1TorrentsStatusesResponse parses an HTTP response from a GetV1TorrentsStatusesWithResponse call
func ParseGetV1TorrentsStatusesResponse(rsp *http.Response) (*GetV1TorrentsStatusesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1TorrentsStatusesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1TorrentsIdResponse parses an HTTP response from a GetV1TorrentsIdWithResponse call
func ParseGetV1TorrentsIdResponse(rsp *http.Response) (*GetV1TorrentsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1TorrentsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Torrent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1TorrentsIdDownloadResponse parses an HTTP response from a PostV1TorrentsIdDownloadWithResponse call
func ParsePostV1TorrentsIdDownloadResponse(rsp *http.Response) (*PostV1TorrentsIdDownloadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1TorrentsIdDownloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Torrent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1UserListResponse parses an HTTP response from a PostV1UserListWithResponse call
func ParsePostV1UserListResponse(rsp *http.Response) (*PostV1UserListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1UserListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePostV1UsersResponse parses an HTTP response from a PostV1UsersWithResponse call
func ParsePostV1UsersResponse(rsp *http.Response) (*PostV1UsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1UsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePostV1UsersLoginResponse parses an HTTP response from a PostV1UsersLoginWithResponse call
func ParsePostV1UsersLoginResponse(rsp *http.Response) (*PostV1UsersLoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1UsersLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserLoginResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1UsersWhoamiResponse parses an HTTP response from a GetV1UsersWhoamiWithResponse call
func ParseGetV1UsersWhoamiResponse(rsp *http.Response) (*GetV1UsersWhoamiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1UsersWhoamiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UserLoginResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteV1UsersIdResponse parses an HTTP response from a DeleteV1UsersIdWithResponse call
func ParseDeleteV1UsersIdResponse(rsp *http.Response) (*DeleteV1UsersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1UsersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetV1UsersIdResponse parses an HTTP response from a GetV1UsersIdWithResponse call
func ParseGetV1UsersIdResponse(rsp *http.Response) (*GetV1UsersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1UsersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePutV1UsersIdResponse parses an HTTP response from a PutV1UsersIdWithResponse call
func ParsePutV1UsersIdResponse(rsp *http.Response) (*PutV1UsersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1UsersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1UsersUserIdRolesResponse parses an HTTP response from a GetV1UsersUserIdRolesWithResponse call
func ParseGetV1UsersUserIdRolesResponse(rsp *http.Response) (*GetV1UsersUserIdRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1UsersUserIdRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Role
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// returns the version and the current status of the rest api
	// (GET /v1/healthz)
	GetV1Healthz(w http.ResponseWriter, r *http.Request)
	// returns a list of roles
	// (GET /v1/roles)
	GetV1Roles(w http.ResponseWriter, r *http.Request)
	// creates a new role
	// (POST /v1/roles)
	PostV1Roles(w http.ResponseWriter, r *http.Request)
	// deletes a role by its id
	// (DELETE /v1/roles/{id})
	DeleteV1RolesId(w http.ResponseWriter, r *http.Request, id string)
	// returns a role by its id
	// (GET /v1/roles/{id})
	GetV1RolesId(w http.ResponseWriter, r *http.Request, id string)
	// updates a role
	// (PUT /v1/roles/{id})
	PutV1RolesId(w http.ResponseWriter, r *http.Request, id string)
	// returns a list of users which are related to a given role
	// (GET /v1/roles/{role_id}/users)
	GetV1RolesRoleIdUsers(w http.ResponseWriter, r *http.Request, roleId string)
	// removes a relationship between a role and a user
	// (DELETE /v1/roles/{role_id}/users/{user_id})
	DeleteV1RolesRoleIdUsersUserId(w http.ResponseWriter, r *http.Request, roleId string, userId string)
	// assigns a user to a role
	// (PUT /v1/roles/{role_id}/users/{user_id})
	PutV1RolesRoleIdUsersUserId(w http.ResponseWriter, r *http.Request, roleId string, userId string)
	// Returns a list of torrents
	// (GET /v1/torrents)
	GetV1Torrents(w http.ResponseWriter, r *http.Request, params GetV1TorrentsParams)
	// Adds multiple magnet links
	// (POST /v1/torrents/magnets)
	PostV1TorrentsMagnets(w http.ResponseWriter, r *http.Request)
	// returns a list of possible torrent status
	// (GET /v1/torrents/statuses)
	GetV1TorrentsStatuses(w http.ResponseWriter, r *http.Request)
	// returns torrent information and the files it contains
	// (GET /v1/torrents/{id})
	GetV1TorrentsId(w http.ResponseWriter, r *http.Request, id string)
	// starts downloading a torrent
	// (POST /v1/torrents/{id}/download)
	PostV1TorrentsIdDownload(w http.ResponseWriter, r *http.Request, id string)
	// returns a list of users
	// (POST /v1/user-list)
	PostV1UserList(w http.ResponseWriter, r *http.Request)
	// creates new user
	// (POST /v1/users)
	PostV1Users(w http.ResponseWriter, r *http.Request)
	// updates user information
	// (POST /v1/users/login)
	PostV1UsersLogin(w http.ResponseWriter, r *http.Request)
	// returns connected user information from jwt token
	// (GET /v1/users/whoami)
	GetV1UsersWhoami(w http.ResponseWriter, r *http.Request)
	// disables user
	// (DELETE /v1/users/{id})
	DeleteV1UsersId(w http.ResponseWriter, r *http.Request, id string)
	// returns user information
	// (GET /v1/users/{id})
	GetV1UsersId(w http.ResponseWriter, r *http.Request, id string)
	// updates user information
	// (PUT /v1/users/{id})
	PutV1UsersId(w http.ResponseWriter, r *http.Request, id string)
	// returns a list of roles which are related to a given user
	// (GET /v1/users/{user_id}/roles)
	GetV1UsersUserIdRoles(w http.ResponseWriter, r *http.Request, userId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetV1Healthz operation middleware
func (siw *ServerInterfaceWrapper) GetV1Healthz(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV1Healthz(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetV1Roles operation middleware
func (siw *ServerInterfaceWrapper) GetV1Roles(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV1Roles(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostV1Roles operation middleware
func (siw *ServerInterfaceWrapper) PostV1Roles(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostV1Roles(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteV1RolesId operation middleware
func (siw *ServerInterfaceWrapper) DeleteV1RolesId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteV1RolesId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetV1RolesId operation middleware
func (siw *ServerInterfaceWrapper) GetV1RolesId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV1RolesId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutV1RolesId operation middleware
func (siw *ServerInterfaceWrapper) PutV1RolesId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutV1RolesId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetV1RolesRoleIdUsers operation middleware
func (siw *ServerInterfaceWrapper) GetV1RolesRoleIdUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "role_id" -------------
	var roleId string

	err = runtime.BindStyledParameterWithOptions("simple", "role_id", r.PathValue("role_id"), &roleId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "role_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV1RolesRoleIdUsers(w, r, roleId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteV1RolesRoleIdUsersUserId operation middleware
func (siw *ServerInterfaceWrapper) DeleteV1RolesRoleIdUsersUserId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "role_id" -------------
	var roleId string

	err = runtime.BindStyledParameterWithOptions("simple", "role_id", r.PathValue("role_id"), &roleId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "role_id", Err: err})
		return
	}

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", r.PathValue("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteV1RolesRoleIdUsersUserId(w, r, roleId, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutV1RolesRoleIdUsersUserId operation middleware
func (siw *ServerInterfaceWrapper) PutV1RolesRoleIdUsersUserId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "role_id" -------------
	var roleId string

	err = runtime.BindStyledParameterWithOptions("simple", "role_id", r.PathValue("role_id"), &roleId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "role_id", Err: err})
		return
	}

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", r.PathValue("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutV1RolesRoleIdUsersUserId(w, r, roleId, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetV1Torrents operation middleware
func (siw *ServerInterfaceWrapper) GetV1Torrents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1TorrentsParams

	// ------------- Required query parameter "limit" -------------

	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "limit"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV1Torrents(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostV1TorrentsMagnets operation middleware
func (siw *ServerInterfaceWrapper) PostV1TorrentsMagnets(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostV1TorrentsMagnets(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetV1TorrentsStatuses operation middleware
func (siw *ServerInterfaceWrapper) GetV1TorrentsStatuses(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV1TorrentsStatuses(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetV1TorrentsId operation middleware
func (siw *ServerInterfaceWrapper) GetV1TorrentsId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV1TorrentsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostV1TorrentsIdDownload operation middleware
func (siw *ServerInterfaceWrapper) PostV1TorrentsIdDownload(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostV1TorrentsIdDownload(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostV1UserList operation middleware
func (siw *ServerInterfaceWrapper) PostV1UserList(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostV1UserList(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostV1Users operation middleware
func (siw *ServerInterfaceWrapper) PostV1Users(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostV1Users(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostV1UsersLogin operation middleware
func (siw *ServerInterfaceWrapper) PostV1UsersLogin(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostV1UsersLogin(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetV1UsersWhoami operation middleware
func (siw *ServerInterfaceWrapper) GetV1UsersWhoami(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV1UsersWhoami(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteV1UsersId operation middleware
func (siw *ServerInterfaceWrapper) DeleteV1UsersId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteV1UsersId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetV1UsersId operation middleware
func (siw *ServerInterfaceWrapper) GetV1UsersId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV1UsersId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutV1UsersId operation middleware
func (siw *ServerInterfaceWrapper) PutV1UsersId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutV1UsersId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetV1UsersUserIdRoles operation middleware
func (siw *ServerInterfaceWrapper) GetV1UsersUserIdRoles(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", r.PathValue("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV1UsersUserIdRoles(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       *http.ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m *http.ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m *http.ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/v1/healthz", wrapper.GetV1Healthz)
	m.HandleFunc("GET "+options.BaseURL+"/v1/roles", wrapper.GetV1Roles)
	m.HandleFunc("POST "+options.BaseURL+"/v1/roles", wrapper.PostV1Roles)
	m.HandleFunc("DELETE "+options.BaseURL+"/v1/roles/{id}", wrapper.DeleteV1RolesId)
	m.HandleFunc("GET "+options.BaseURL+"/v1/roles/{id}", wrapper.GetV1RolesId)
	m.HandleFunc("PUT "+options.BaseURL+"/v1/roles/{id}", wrapper.PutV1RolesId)
	m.HandleFunc("GET "+options.BaseURL+"/v1/roles/{role_id}/users", wrapper.GetV1RolesRoleIdUsers)
	m.HandleFunc("DELETE "+options.BaseURL+"/v1/roles/{role_id}/users/{user_id}", wrapper.DeleteV1RolesRoleIdUsersUserId)
	m.HandleFunc("PUT "+options.BaseURL+"/v1/roles/{role_id}/users/{user_id}", wrapper.PutV1RolesRoleIdUsersUserId)
	m.HandleFunc("GET "+options.BaseURL+"/v1/torrents", wrapper.GetV1Torrents)
	m.HandleFunc("POST "+options.BaseURL+"/v1/torrents/magnets", wrapper.PostV1TorrentsMagnets)
	m.HandleFunc("GET "+options.BaseURL+"/v1/torrents/statuses", wrapper.GetV1TorrentsStatuses)
	m.HandleFunc("GET "+options.BaseURL+"/v1/torrents/{id}", wrapper.GetV1TorrentsId)
	m.HandleFunc("POST "+options.BaseURL+"/v1/torrents/{id}/download", wrapper.PostV1TorrentsIdDownload)
	m.HandleFunc("POST "+options.BaseURL+"/v1/user-list", wrapper.PostV1UserList)
	m.HandleFunc("POST "+options.BaseURL+"/v1/users", wrapper.PostV1Users)
	m.HandleFunc("POST "+options.BaseURL+"/v1/users/login", wrapper.PostV1UsersLogin)
	m.HandleFunc("GET "+options.BaseURL+"/v1/users/whoami", wrapper.GetV1UsersWhoami)
	m.HandleFunc("DELETE "+options.BaseURL+"/v1/users/{id}", wrapper.DeleteV1UsersId)
	m.HandleFunc("GET "+options.BaseURL+"/v1/users/{id}", wrapper.GetV1UsersId)
	m.HandleFunc("PUT "+options.BaseURL+"/v1/users/{id}", wrapper.PutV1UsersId)
	m.HandleFunc("GET "+options.BaseURL+"/v1/users/{user_id}/roles", wrapper.GetV1UsersUserIdRoles)

	return m
}
