// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/what-da-flac/wtf/go-common/amazon"
	"github.com/what-da-flac/wtf/lambdas/torrent-download/internal/interfaces"
	"os"
	"sync"
)

// Ensure, that UploaderMock does implement interfaces.Uploader.
// If this is not the case, regenerate this file with moq.
var _ interfaces.Uploader = &UploaderMock{}

// UploaderMock is a mock implementation of interfaces.Uploader.
//
//	func TestSomethingThatUsesUploader(t *testing.T) {
//
//		// make and configure a mocked interfaces.Uploader
//		mockedUploader := &UploaderMock{
//			UploadFunc: func(file *os.File, bucket string, key string, content amazon.Content) error {
//				panic("mock out the Upload method")
//			},
//		}
//
//		// use mockedUploader in code that requires interfaces.Uploader
//		// and then make assertions.
//
//	}
type UploaderMock struct {
	// UploadFunc mocks the Upload method.
	UploadFunc func(file *os.File, bucket string, key string, content amazon.Content) error

	// calls tracks calls to the methods.
	calls struct {
		// Upload holds details about calls to the Upload method.
		Upload []struct {
			// File is the file argument value.
			File *os.File
			// Bucket is the bucket argument value.
			Bucket string
			// Key is the key argument value.
			Key string
			// Content is the content argument value.
			Content amazon.Content
		}
	}
	lockUpload sync.RWMutex
}

// Upload calls UploadFunc.
func (mock *UploaderMock) Upload(file *os.File, bucket string, key string, content amazon.Content) error {
	if mock.UploadFunc == nil {
		panic("UploaderMock.UploadFunc: method is nil but Uploader.Upload was just called")
	}
	callInfo := struct {
		File    *os.File
		Bucket  string
		Key     string
		Content amazon.Content
	}{
		File:    file,
		Bucket:  bucket,
		Key:     key,
		Content: content,
	}
	mock.lockUpload.Lock()
	mock.calls.Upload = append(mock.calls.Upload, callInfo)
	mock.lockUpload.Unlock()
	return mock.UploadFunc(file, bucket, key, content)
}

// UploadCalls gets all the calls that were made to Upload.
// Check the length with:
//
//	len(mockedUploader.UploadCalls())
func (mock *UploaderMock) UploadCalls() []struct {
	File    *os.File
	Bucket  string
	Key     string
	Content amazon.Content
} {
	var calls []struct {
		File    *os.File
		Bucket  string
		Key     string
		Content amazon.Content
	}
	mock.lockUpload.RLock()
	calls = mock.calls.Upload
	mock.lockUpload.RUnlock()
	return calls
}
